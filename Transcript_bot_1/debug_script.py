import sys
import os
import platform
import subprocess
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('system_debug.log', encoding='utf-8', mode='w'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_system_environment():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    logger.info(f"–û–°: {platform.platform()}")
    logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.architecture()[0]}")
    logger.info(f"–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {os.getcwd()}")
    logger.info(f"–ü—É—Ç—å Python: {sys.executable}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    def check_library(name):
        try:
            __import__(name)
            logger.info(f"‚úÖ {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        except ImportError:
            logger.warning(f"‚ùå {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False
    
    libraries = [
        'torch', 'whisper', 'openai', 'yt_dlp', 
        'telegram', 'soundfile', 'numpy', 'scipy'
    ]
    
    for lib in libraries:
        check_library(lib)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                                capture_output=True, 
                                text=True, 
                                check=True)
        logger.info(f"FFmpeg –≤–µ—Ä—Å–∏—è:\n{result.stdout}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FFmpeg: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA (–¥–ª—è PyTorch)
    try:
        import torch
        logger.info(f"CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            logger.info(f"CUDA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {torch.cuda.get_device_name(0)}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CUDA: {e}")

def check_telegram_bot_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
    try:
        from config import TRANSCRIPT_BOT_TOKEN
        logger.info("‚úÖ –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

def check_openai_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI"""
    try:
        from config import OPENAI_API_KEY
        logger.info("‚úÖ API –∫–ª—é—á OpenAI –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞ OpenAI: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    check_system_environment()
    check_telegram_bot_config()
    check_openai_config()

if __name__ == '__main__':
    main()
